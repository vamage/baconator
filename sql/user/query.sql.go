// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, title,picture, display_name, email, uuid, description, labels, annotations, tags
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
         )
    RETURNING id, name, display_name, email, picture, uuid, title, description, labels, annotations, tags, links_id, created_at
`

type CreateUserParams struct {
	Name        string
	Title       pgtype.Text
	Picture     pgtype.Text
	DisplayName pgtype.Text
	Email       pgtype.Text
	Uuid        pgtype.UUID
	Description pgtype.Text
	Labels      []string
	Annotations []string
	Tags        []string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Title,
		arg.Picture,
		arg.DisplayName,
		arg.Email,
		arg.Uuid,
		arg.Description,
		arg.Labels,
		arg.Annotations,
		arg.Tags,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.Email,
		&i.Picture,
		&i.Uuid,
		&i.Title,
		&i.Description,
		&i.Labels,
		&i.Annotations,
		&i.Tags,
		&i.LinksID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, display_name, email, picture, uuid, title, description, labels, annotations, tags, links_id, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.Email,
		&i.Picture,
		&i.Uuid,
		&i.Title,
		&i.Description,
		&i.Labels,
		&i.Annotations,
		&i.Tags,
		&i.LinksID,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, display_name, email, picture, uuid, title, description, labels, annotations, tags, links_id, created_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.Email,
			&i.Picture,
			&i.Uuid,
			&i.Title,
			&i.Description,
			&i.Labels,
			&i.Annotations,
			&i.Tags,
			&i.LinksID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set name = $2,
    title = $3,
    picture = $4,
    display_name = $5,
    email = $6,
    description = $4,
    labels = $5,
    annotations = $6

WHERE id = $1
    RETURNING id, name, display_name, email, picture, uuid, title, description, labels, annotations, tags, links_id, created_at
`

type UpdateUserParams struct {
	ID          int64
	Name        string
	Title       pgtype.Text
	Picture     pgtype.Text
	DisplayName pgtype.Text
	Email       pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.Picture,
		arg.DisplayName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.Email,
		&i.Picture,
		&i.Uuid,
		&i.Title,
		&i.Description,
		&i.Labels,
		&i.Annotations,
		&i.Tags,
		&i.LinksID,
		&i.CreatedAt,
	)
	return i, err
}
