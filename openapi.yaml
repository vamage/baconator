openapi: 3.0.3
info:
  title: "Baconator"
  description: "resource provisioner"
  version: 0.0.1
servers:
  - url: 'http://localhost:8081'
    description: 'Local server'
paths:
  /whoami:
    get:
      description: "return user from oauth token"
      security:
        - oauth2: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      description: "return user by id"
      security:
        []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          description: "user id"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      description: "return all users"
      security:
        []

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    post:
      description: "Add a new user"
      security: []
      requestBody:
        description: "User to add"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: "Update a user"
      security:
        - oauth2: [ ]
      requestBody:
        description: "User to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{resourceID}:
    get:
      description: "return resources"
      security:
        - oauth2: [ ]
      parameters:
        - in: path
          name: resourceID
          required: true
          schema:
            type: integer
          description: "resource ID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources:
    post:
      description: "Add a new resource type"
      security:
        - oauth2: [ ]
      requestBody:
        description: "Resource to add"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://oauth2.googleapis.com/tokeninfo"
          tokenUrl: "https://https://oauth2.googleapis.com/token"
  schemas:
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      type: object
    entity:
      properties:
        apiVersion:
          type: string
          default: "backstage.io/v1alpha1"
        kind:
            type: string
            default: "User"
        metadata:
          $ref: "#/components/schemas/stringOrArray"
        spec:
          $ref: '#/components/schemas/stringOrArray'
      type: object
    Resource:
      required:
        - name
        - resourceInputs
      properties:
        name:
          type: string
          example: gcs-bucket
        resourceInputs:
          type: array
          items:
            $ref: '#/components/schemas/Input'
      type: object
    Input:
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: bucketName
        description:
          type: string
          example: name of the bucket
        type:
            type: string
            example: string
        apiVersion:
          type: string
          default: "backstage.io/v1alpha1"
        kind:
            type: string
            default: "User"
        metadata:
          $ref: "#/components/schemas/stringOrArray"
        spec:
          $ref: '#/components/schemas/stringOrArray'
      type: object
    stringOrArray:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: array
            items:
              type: string
          - type: object
            additionalProperties:
              type: string


  
