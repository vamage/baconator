// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/entity
type Entity struct {
	ApiVersion OptString        `json:"apiVersion"`
	Kind       OptString        `json:"kind"`
	Metadata   OptStringOrArray `json:"metadata"`
	Spec       OptStringOrArray `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *Entity) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *Entity) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *Entity) GetMetadata() OptStringOrArray {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *Entity) GetSpec() OptStringOrArray {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *Entity) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *Entity) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *Entity) SetMetadata(val OptStringOrArray) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *Entity) SetSpec(val OptStringOrArray) {
	s.Spec = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Input
type Input struct {
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Type        OptString        `json:"type"`
	ApiVersion  OptString        `json:"apiVersion"`
	Kind        OptString        `json:"kind"`
	Metadata    OptStringOrArray `json:"metadata"`
	Spec        OptStringOrArray `json:"spec"`
}

// GetName returns the value of Name.
func (s *Input) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Input) GetDescription() string {
	return s.Description
}

// GetType returns the value of Type.
func (s *Input) GetType() OptString {
	return s.Type
}

// GetApiVersion returns the value of ApiVersion.
func (s *Input) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *Input) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *Input) GetMetadata() OptStringOrArray {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *Input) GetSpec() OptStringOrArray {
	return s.Spec
}

// SetName sets the value of Name.
func (s *Input) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Input) SetDescription(val string) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *Input) SetType(val OptString) {
	s.Type = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *Input) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *Input) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *Input) SetMetadata(val OptStringOrArray) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *Input) SetSpec(val OptStringOrArray) {
	s.Spec = val
}

type OAuth2 struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *OAuth2) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *OAuth2) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *OAuth2) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *OAuth2) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringOrArray returns new OptStringOrArray with value set to v.
func NewOptStringOrArray(v StringOrArray) OptStringOrArray {
	return OptStringOrArray{
		Value: v,
		Set:   true,
	}
}

// OptStringOrArray is optional StringOrArray.
type OptStringOrArray struct {
	Value StringOrArray
	Set   bool
}

// IsSet returns true if OptStringOrArray was set.
func (o OptStringOrArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringOrArray) Reset() {
	var v StringOrArray
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringOrArray) SetTo(v StringOrArray) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringOrArray) Get() (v StringOrArray, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringOrArray) Or(d StringOrArray) StringOrArray {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Resource
type Resource struct {
	Name           string  `json:"name"`
	ResourceInputs []Input `json:"resourceInputs"`
}

// GetName returns the value of Name.
func (s *Resource) GetName() string {
	return s.Name
}

// GetResourceInputs returns the value of ResourceInputs.
func (s *Resource) GetResourceInputs() []Input {
	return s.ResourceInputs
}

// SetName sets the value of Name.
func (s *Resource) SetName(val string) {
	s.Name = val
}

// SetResourceInputs sets the value of ResourceInputs.
func (s *Resource) SetResourceInputs(val []Input) {
	s.ResourceInputs = val
}

// Ref: #/components/schemas/stringOrArray
type StringOrArray map[string]StringOrArrayItem

func (s *StringOrArray) init() StringOrArray {
	m := *s
	if m == nil {
		m = map[string]StringOrArrayItem{}
		*s = m
	}
	return m
}

// StringOrArrayItem represents sum type.
type StringOrArrayItem struct {
	Type               StringOrArrayItemType // switch on this field
	String             string
	StringArray        []string
	StringOrArrayItem2 StringOrArrayItem2
}

// StringOrArrayItemType is oneOf type of StringOrArrayItem.
type StringOrArrayItemType string

// Possible values for StringOrArrayItemType.
const (
	StringStringOrArrayItem             StringOrArrayItemType = "string"
	StringArrayStringOrArrayItem        StringOrArrayItemType = "[]string"
	StringOrArrayItem2StringOrArrayItem StringOrArrayItemType = "StringOrArrayItem2"
)

// IsString reports whether StringOrArrayItem is string.
func (s StringOrArrayItem) IsString() bool { return s.Type == StringStringOrArrayItem }

// IsStringArray reports whether StringOrArrayItem is []string.
func (s StringOrArrayItem) IsStringArray() bool { return s.Type == StringArrayStringOrArrayItem }

// IsStringOrArrayItem2 reports whether StringOrArrayItem is StringOrArrayItem2.
func (s StringOrArrayItem) IsStringOrArrayItem2() bool {
	return s.Type == StringOrArrayItem2StringOrArrayItem
}

// SetString sets StringOrArrayItem to string.
func (s *StringOrArrayItem) SetString(v string) {
	s.Type = StringStringOrArrayItem
	s.String = v
}

// GetString returns string and true boolean if StringOrArrayItem is string.
func (s StringOrArrayItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringStringOrArrayItem returns new StringOrArrayItem from string.
func NewStringStringOrArrayItem(v string) StringOrArrayItem {
	var s StringOrArrayItem
	s.SetString(v)
	return s
}

// SetStringArray sets StringOrArrayItem to []string.
func (s *StringOrArrayItem) SetStringArray(v []string) {
	s.Type = StringArrayStringOrArrayItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if StringOrArrayItem is []string.
func (s StringOrArrayItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayStringOrArrayItem returns new StringOrArrayItem from []string.
func NewStringArrayStringOrArrayItem(v []string) StringOrArrayItem {
	var s StringOrArrayItem
	s.SetStringArray(v)
	return s
}

// SetStringOrArrayItem2 sets StringOrArrayItem to StringOrArrayItem2.
func (s *StringOrArrayItem) SetStringOrArrayItem2(v StringOrArrayItem2) {
	s.Type = StringOrArrayItem2StringOrArrayItem
	s.StringOrArrayItem2 = v
}

// GetStringOrArrayItem2 returns StringOrArrayItem2 and true boolean if StringOrArrayItem is StringOrArrayItem2.
func (s StringOrArrayItem) GetStringOrArrayItem2() (v StringOrArrayItem2, ok bool) {
	if !s.IsStringOrArrayItem2() {
		return v, false
	}
	return s.StringOrArrayItem2, true
}

// NewStringOrArrayItem2StringOrArrayItem returns new StringOrArrayItem from StringOrArrayItem2.
func NewStringOrArrayItem2StringOrArrayItem(v StringOrArrayItem2) StringOrArrayItem {
	var s StringOrArrayItem
	s.SetStringOrArrayItem2(v)
	return s
}

type StringOrArrayItem2 map[string]string

func (s *StringOrArrayItem2) init() StringOrArrayItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}
